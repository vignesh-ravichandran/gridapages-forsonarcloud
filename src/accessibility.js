import React from "react";
import styled from "@emotion/styled";
/**
 * `<Images>` ('Images')
 * - [Open in Figma](https://figma.com/file/ueE4mjVMSLxwc7lA94Nz5G?node-id=1003976:254)
 * - [Open in Grida](https://code.grida.co/files/ueE4mjVMSLxwc7lA94Nz5G?node=1003976:254)
 * 
 * 
 * ---
 * @example
 * ```tsx
 * import React from "react";
 * 
 * export default function () {
 *   return (
 *     <>
 *       ðŸ‘‡ instanciate widget like below. ðŸ‘‡
 *       <Images/>
 *     </>
 *   )
 * }
 * ```
 * ---
 * @params {any} props - this widget does not requires props. you can pass custom dynamic props to the widget as you want (on typescript, it will raise type check issues).
 * ---
 * @preview
 * ![](https://figma-alpha-api.s3.us-west-2.amazonaws.com/images/13a3e28e-d69d-4e58-840c-2a979a63cacf)
 * ---
 * @remarks
 * @see {@link https://grida.co/docs} for more information.
 * ---
 * Code generated by grida.co | engine 0.0.1 (Apache-2.0) | Generated code under CC0 (public domain) *This code is free to use, modify, and redistribute. (aknowledgment is not required)*
 * 
 * 
 * ![Made with Grida](https://bridged-service-static.s3.us-west-1.amazonaws.com/branding/logo/32.png)
 * <!-- Info: Please do not remove this comment unless intended. removing this section will break grida integrations. -->
 * <!-- grida.meta.widget_declaration | engine : 0.0.1 | source : figma://ueE4mjVMSLxwc7lA94Nz5G/1003976:254 -->
 */
export function Images() {
  return (
    <RootWrapperImages>
      <AccessiblePrototypesInFigma>
        Accessible Prototypes in Figma
      </AccessiblePrototypesInFigma>
      <Frame4>
        <Images_0001>
          Images
        </Images_0001>
        <PrototypesIncludingShapesWithImageFillWillAppearAsAnImageTagWithAltTextThatMatchesTheShapeLayerName>
          Prototypes including shapes with image fill will appear as an image tag with alt-text that matches the shape layer name.
        </PrototypesIncludingShapesWithImageFillWillAppearAsAnImageTagWithAltTextThatMatchesTheShapeLayerName>
        <FramesWithImageFillWillOnlyAppearAsAnImageIfTheFrameIsNotATopLevelFrameAndHasNothingElseInsideOfIt>
          Frames with image fill will only appear as an image if the frame is not a top-level frame and has nothing else inside of it.
        </FramesWithImageFillWillOnlyAppearAsAnImageIfTheFrameIsNotATopLevelFrameAndHasNothingElseInsideOfIt>
        <TryUsingYourScreenReaderToReadTheFollowingImages>
          Try using your screen reader to read the following images.
        </TryUsingYourScreenReaderToReadTheFollowingImages>
        <Frame15311>
          <CircleShapeFilledWithCat xmlns="http://www.w3.org/2000/svg">
            <path fill="transparent" d="M120 60C120 93.1371 93.1371 120 60 120C26.8629 120 0 93.1371 0 60C0 26.8629 26.8629 0 60 0C93.1371 0 120 26.8629 120 60Z"/>
          </CircleShapeFilledWithCat>
          <PolygonShapeFilledWithImageOfADog xmlns="http://www.w3.org/2000/svg">
            <path fill="transparent" d="M75 0L139.952 112.5L10.0481 112.5L75 0Z"/>
          </PolygonShapeFilledWithImageOfADog>
          <RectangleShapeFilledWithImageOfAHorse src="https://figma-alpha-api.s3.us-west-2.amazonaws.com/images/22d6ce8b-2856-4ae6-a4b4-46769231d60e" alt="image of RectangleShapeFilledWithImageOfAHorse"/>
          <ANestedFrameWithAnImageOfATiger src="https://figma-alpha-api.s3.us-west-2.amazonaws.com/images/880e0e59-db45-4c2c-b696-9a3acde21cd3" alt="image of ANestedFrameWithAnImageOfATiger"/>
        </Frame15311>
      </Frame4>
      <Navigation>
        Navigation
      </Navigation>
      <Menu>
        <OverviewButton>
          <ButtonText>
            Overview
          </ButtonText>
        </OverviewButton>
        <ImagesButton>
          <ButtonText>
            Images
          </ButtonText>
        </ImagesButton>
        <OverlaysButton>
          <ButtonText>
            Overlays
          </ButtonText>
        </OverlaysButton>
        <ChangeToButton>
          <ButtonText>
            Change to
          </ButtonText>
        </ChangeToButton>
        <ScrollingButton>
          <ButtonText>
            Scrolling
          </ButtonText>
        </ScrollingButton>
        <ListsButton>
          <ButtonText>
            Lists
          </ButtonText>
        </ListsButton>
      </Menu>
    </RootWrapperImages>
  )
}

const RootWrapperImages = styled.div`
	display: flex;
	justify-content: flex-start;
	flex-direction: column;
	align-items: flex-start;
	gap: 32px;
	min-height: 100vh;
	background-color: rgb(255, 199, 0);
	box-sizing: border-box;
	padding: 80px 80px 40px;
`;

const AccessiblePrototypesInFigma = styled.span`
	color: black;
	text-overflow: ellipsis;
	font-size: 40px;
	font-family: Whyte, sans-serif;
	font-weight: 700;
	text-align: left;
`;

const Frame4 = styled.div`
	display: flex;
	justify-content: flex-start;
	flex-direction: column;
	align-items: flex-start;
	flex: none;
	gap: 25px;
	width: 1140px;
	height: 377px;
	box-sizing: border-box;
`;

const Images_0001 = styled.span`
	color: black;
	text-overflow: ellipsis;
	font-size: 35px;
	font-family: Whyte, sans-serif;
	font-weight: 400;
	text-align: left;
`;

const PrototypesIncludingShapesWithImageFillWillAppearAsAnImageTagWithAltTextThatMatchesTheShapeLayerName = styled.span`
	color: black;
	text-overflow: ellipsis;
	font-size: 20px;
	font-family: Whyte, sans-serif;
	font-weight: 400;
	text-align: left;
`;

const FramesWithImageFillWillOnlyAppearAsAnImageIfTheFrameIsNotATopLevelFrameAndHasNothingElseInsideOfIt = styled.span`
	color: black;
	text-overflow: ellipsis;
	font-size: 20px;
	font-family: Whyte, sans-serif;
	font-weight: 400;
	text-align: left;
`;

const TryUsingYourScreenReaderToReadTheFollowingImages = styled.span`
	color: black;
	text-overflow: ellipsis;
	font-size: 20px;
	font-family: Whyte, sans-serif;
	font-weight: 400;
	text-align: left;
`;

const Frame15311 = styled.div`
	display: flex;
	justify-content: flex-start;
	flex-direction: row;
	align-items: flex-start;
	flex: none;
	gap: 34px;
	box-sizing: border-box;
	padding: 10px;
`;

const CircleShapeFilledWithCat = styled.svg`
	width: 120px;
	height: 120px;
`;

const PolygonShapeFilledWithImageOfADog = styled.svg`
	width: 150px;
	height: 150px;
`;

const RectangleShapeFilledWithImageOfAHorse = styled.img`
	width: 250px;
	height: 120px;
	object-fit: cover;
`;

const ANestedFrameWithAnImageOfATiger = styled.img`
	width: 280px;
	height: 120px;
	object-fit: cover;
`;

const Navigation = styled.span`
	color: black;
	text-overflow: ellipsis;
	font-size: 25px;
	font-family: Whyte, sans-serif;
	font-weight: 400;
	text-align: left;
	align-self: stretch;
	flex-shrink: 0;
`;

const Menu = styled.div`
	display: flex;
	justify-content: flex-start;
	flex-direction: row;
	align-items: flex-start;
	flex: none;
	gap: 43px;
	box-sizing: border-box;
	padding: 10px;
`;

const OverviewButton = styled.div`
	display: flex;
	justify-content: center;
	flex-direction: row;
	align-items: center;
	flex: none;
	gap: 10px;
	box-sizing: border-box;
	padding: 14px 17px;
`;

const ButtonText = styled.span`
	color: black;
	text-overflow: ellipsis;
	font-size: 18px;
	font-family: Whyte, sans-serif;
	font-weight: 400;
	text-align: left;
`;

const ImagesButton = styled.div`
	display: flex;
	justify-content: center;
	flex-direction: row;
	align-items: center;
	flex: none;
	gap: 10px;
	box-sizing: border-box;
	padding: 14px 17px;
`;

const OverlaysButton = styled.div`
	display: flex;
	justify-content: center;
	flex-direction: row;
	align-items: center;
	flex: none;
	gap: 10px;
	box-sizing: border-box;
	padding: 14px 17px;
`;

const ChangeToButton = styled.div`
	display: flex;
	justify-content: center;
	flex-direction: row;
	align-items: center;
	flex: none;
	gap: 10px;
	box-sizing: border-box;
	padding: 14px 17px;
`;

const ScrollingButton = styled.div`
	display: flex;
	justify-content: center;
	flex-direction: row;
	align-items: center;
	flex: none;
	gap: 10px;
	box-sizing: border-box;
	padding: 14px 17px;
`;

const ListsButton = styled.div`
	display: flex;
	justify-content: center;
	flex-direction: row;
	align-items: center;
	flex: none;
	gap: 10px;
	box-sizing: border-box;
	padding: 14px 17px;
`;

